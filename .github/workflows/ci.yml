name: Rust CI

# Trigger the workflow on push and pull request events
on:
  push:
    branches:
      - main    # Runs on push to the main branch
  pull_request:
    branches:
      - main    # Runs on pull requests targeting the main branch

# Define the jobs to run
jobs:
  build:
    name: Build and Test with Rust
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Rust (using the latest stable version)
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy, rustfmt  # Adds useful tools: Clippy (linter) and Rustfmt (formatter)
          override: true

      # Step 3: Cache Cargo dependencies to speed up subsequent builds
      - name: Cache Cargo registry and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Step 4: Build the project
      - name: Build with Cargo
        run: |
          cargo build --verbose
          ls

      # Step 5: Run tests
      - name: Run tests
        run: cargo test --verbose

      # Step 6: Check code formatting
      - name: Check code formatting
        run: cargo fmt -- --check

      # Step 7: Lint the code with Clippy
   #   - name: Lint with Clippy
      #  run: cargo clippy -- -D warnings  # Treat all warnings as errors
